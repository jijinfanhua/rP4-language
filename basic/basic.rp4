#include <core.rp4>
#include <v1model.rp4>

stream packet_seg = packet[100];

headers {
	hdr ethernet_t {
		bit<48> dstAddr;
		bit<48> srcAddr;
		bit<16> etherType;
		implicit parser(etherType) {
			0x0800:	ipv4_t;
			default:;
		}
	}

	hdr ipv4_t {
		bit<4>    version;
		bit<4>    ihl;
		bit<8>    diffserv;
		bit<16>   totalLen;
		bit<16>   identification;
		bit<3>    flags;
		bit<13>   fragOffset;
		bit<8>    ttl;
		bit<8>    protocol;
		bit<16>   hdrChecksum;
		bit<32>   srcAddr;
		bit<32>   dstAddr;
		implicit parser() {
			default: accept;
		};
		implicit func verify_checksum() {
			return this.hdrChecksum == HashAlgorithm.csum16(this.version,
												this.ihl,
												this.diffserv,
												this.totalLen,
												this.identification,
												this.flags,
												this.fragOffset,
												this.ttl,
												this.protocol,
												this.srcAddr,
												this.dstAddr);
		} # do when extract
		
		implicit func update_checksum() {
			this.hdrChecksum = HashAlgorithm.csum16(this.version,
												this.ihl,
												this.diffserv,
												this.totalLen,
												this.identification,
												this.flags,
												this.fragOffset,
												this.ttl,
												this.protocol,
												this.srcAddr,
												this.dstAddr);
		}
	}
}

structs {
	struct metadata {

	}meta;
}

actions {
	action ipv4_forward(para) {
		copy_field(standard_metadata.egress_spec, para.port);
		copy_field(hs.ethermet.srcAddr, hs.ethernet.dstAddr);
		copy_field(hs.ethernet.dstAddr, para.dstAddr);
		decrement(hs.ipv4.ttl);
	}
	
	action drop() {
        mark_to_drop(standard_metadata);
    }
}

tables {
	table ipv4_lpm {
        key = {
            hs.ipv4.dstAddr: lpm;
        }
        size = 1024;
    }
}

header_sequence {
	ethernet_t	ethernet;
	ipv4_t		ipv4;
}hs;

control rP4_Ingress {
	stage ipv4_lpm_s {
		hs.ethernet = packet_seg.ethernet_t => [drop()];
		hs.ipv4 = packet_seg.ipv4_t ? [verify_checksum() => [drop()]] : [drop()]; # if not valid, break this stage
		action, para = ipv4_lpm.lpm([hs.ipv4.dstAddr]);
		switch action:
			1: ipv4_forward(para);
			2: drop();
			default: drop();
	}
}

control rP4_Egress -> [update_checksum()] {
	
}

pipelines {
	pipeline p0 {
		rP4_Ingress.ipv4_lpm_s,
		rP4_Egress
	}
}